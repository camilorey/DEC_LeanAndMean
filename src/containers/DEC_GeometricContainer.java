/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package containers;

//

import complex.DEC_DualObject;
import complex.DEC_Object;
import complex.DEC_PrimalObject;
import complex.IndexSet;
import exceptions.DEC_Exception;
import java.util.ArrayList;
import java.util.HashMap;
import processing.core.PVector;
import readers.OBJMeshReader;
import utils.GeometricUtils;

//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : DEC_GeometricContainer.java
//  @ Date : 14/02/2016
//  @ Author : 
//
//




public class DEC_GeometricContainer {
	protected ArrayList<PVector> primalVertices;
	protected ArrayList<PVector> dualVertices;
        protected HashMap<PVector,PVector> vertexNormals;
        protected HashMap<PVector,PVector> vertexTexels;
        protected HashMap<PVector,PVector> faceNormals;
        protected ArrayList<IndexSet> cellInformation;
	
        public DEC_GeometricContainer() {
	 primalVertices = new ArrayList<PVector>();
         dualVertices = new ArrayList<PVector>();
         vertexNormals = new HashMap<PVector,PVector>();
         vertexTexels = new HashMap<PVector,PVector>();
         faceNormals = new HashMap<PVector,PVector>();
         cellInformation = new ArrayList<IndexSet>();
	}
	
	public void setContent(OBJMeshReader reader) {
	 primalVertices = reader.getModelVertices();
         dualVertices = reader.getModelDualVertices();
         faceNormals = reader.getModelFaceNormals();
         vertexNormals = reader.getVertexNormals();
         vertexTexels = reader.getVertexTexels();
         cellInformation = reader.getModelFaceIndices();
	}
        public ArrayList<IndexSet> getModelFaceIndexInformation(){
         return cellInformation;
        }
        public ArrayList<PVector> getObjectVectorContent(DEC_PrimalObject object)throws DEC_Exception{
         ArrayList<PVector> vectorInfo = new ArrayList<PVector>();
         if(object.dimension()==0){
          int vertIndex = object.getVertices().getIndex(0);
          PVector vertCenter = primalVertices.get(vertIndex);
          PVector vertNormal = vertexNormals.get(vertCenter);
          PVector vertTexel = vertexTexels.get(vertCenter);
          vectorInfo.add(vertCenter);
          vectorInfo.add(vertNormal);
          vectorInfo.add(vertTexel);
         }else if(object.dimension()==1){
          int i0 = object.getVertices().getIndex(0);
          int i1 = object.getVertices().getIndex(1);
          PVector v0 = primalVertices.get(i0);
          PVector v1 = primalVertices.get(i1);
          PVector edgeCenter = circumcenter(object);
          PVector n0 = vertexNormals.get(v0);
          PVector n1 = vertexNormals.get(v1);
          PVector t0 = vertexTexels.get(v0);
          PVector t1 = vertexTexels.get(v1);
          vectorInfo.add(edgeCenter);
          vectorInfo.add(n0);
          vectorInfo.add(n1);
          vectorInfo.add(t0);
          vectorInfo.add(t1);
         }else if(object.dimension()==2){
          int i0 = object.getVertices().getIndex(0);
          int i1 = object.getVertices().getIndex(1);
          int i2 = object.getVertices().getIndex(2);
          PVector v0 = primalVertices.get(i0);
          PVector v1 = primalVertices.get(i1);
          PVector v2 = primalVertices.get(i2);
          PVector n0 = vertexNormals.get(v0);
          PVector n1 = vertexNormals.get(v1);
          PVector n2 = vertexNormals.get(v2);
          PVector faceCenter = dualVertices.get(object.getIndex());
          PVector faceNormal = faceNormals.get(faceCenter);
          PVector t0 = vertexTexels.get(primalVertices.get(i0));
          PVector t1 = vertexTexels.get(primalVertices.get(i1));
          PVector t2 = vertexTexels.get(primalVertices.get(i2));
          vectorInfo.add(faceCenter); //vector content 0
          vectorInfo.add(faceNormal); //vector content 1
          vectorInfo.add(n0); //vector content 2
          vectorInfo.add(n1); //vector content 3
          vectorInfo.add(n2); //vector content 4
          vectorInfo.add(t0); //vector content 5
          vectorInfo.add(t1); //vector content 6
          vectorInfo.add(t2); //vector content 7
         }
         return vectorInfo;
        }
	public ArrayList<PVector> getGeometricContent(DEC_Object object) throws DEC_Exception{
         if(object instanceof DEC_PrimalObject){
          return getFromPrimalVertices(object.getVertices());
         }else if(object instanceof DEC_DualObject){
          return getFromDualVertices(object.getVertices()); 
         }else{
          throw new DEC_Exception("undefined geometric settings");
         }
	}
	public ArrayList<PVector> getFromPrimalVertices(IndexSet set) throws DEC_Exception{
         ArrayList<PVector> verts = new ArrayList<PVector>();
         for(int i=0;i<set.size();i++){
          verts.add(primalVertices.get(set.getIndex(i)));
         }
         return verts;
        }
        public ArrayList<PVector> getFromDualVertices(IndexSet set) throws DEC_Exception{
         ArrayList<PVector> verts = new ArrayList<PVector>();
         for(int i=0;i<set.size();i++){
          if(set.getIndex(i)<dualVertices.size()){
           verts.add(dualVertices.get(set.getIndex(i)));
          }
         }
         return verts;
        }
        public PVector circumcenter(DEC_Object object) throws DEC_Exception{
         if(object instanceof DEC_PrimalObject){
          return primalCircumcenter(object.getVertices());
         }else if(object instanceof DEC_DualObject){
          return dualCircumcenter(object.getVertices());
         }else{
          return null;
         }
        }
        public PVector dualCircumcenter(IndexSet indices) throws DEC_Exception{
         PVector[] p = new PVector[indices.size()];
         for(int i=0;i<indices.size();i++){
          p[i] = dualVertices.get(indices.getIndex(i));
         }
         return GeometricUtils.centroid(p);
        }
        public PVector primalCircumcenter(IndexSet indices) throws DEC_Exception{
         PVector[] p = new PVector[indices.size()];
         for(int i=0;i<indices.size();i++){
          p[i] = primalVertices.get(indices.getIndex(i));
         }
         return GeometricUtils.centroid(p);
        }
        public void printContainerInfo(){
         System.out.println("geometric container info: ");
         System.out.println("number of primal vertices loaded: "+ primalVertices.size());
         System.out.println("number of primal faces loaded: "+cellInformation.size());
         System.out.println("number of dual vertices loaded: "+dualVertices.size());
        }
}

