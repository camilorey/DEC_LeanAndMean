/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package complex;

//

import containers.DEC_GeometricContainer;
import exceptions.DEC_Exception;
import java.util.ArrayList;
import java.util.Date;
import processing.core.PVector;
import readers.OBJMeshReader;
import utils.GeometricUtils;

//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : DEC_Complex.java
//  @ Date : 14/02/2016
//  @ Author : 
//
//
public class DEC_Complex {

 protected ArrayList<DEC_PrimalObject> primalVertices;
 protected ArrayList<DEC_PrimalObject> primalEdges;
 protected ArrayList<DEC_PrimalObject> primalFaces;
 protected ArrayList<DEC_PrimalObject> primalTets;
 protected ArrayList<DEC_DualObject> dualVertices;
 protected ArrayList<DEC_DualObject> dualEdges;
 protected ArrayList<DEC_DualObject> dualFaces;
 protected ArrayList<DEC_DualObject> dualCells;
 public DEC_Complex() {
  primalVertices = new ArrayList<DEC_PrimalObject>();
  primalEdges = new ArrayList<DEC_PrimalObject>();
  primalFaces = new ArrayList<DEC_PrimalObject>();
  primalTets = new ArrayList<DEC_PrimalObject>();
  dualVertices = new ArrayList<DEC_DualObject>();
  dualEdges = new ArrayList<DEC_DualObject>();
  dualFaces = new ArrayList<DEC_DualObject>();
  dualCells = new ArrayList<DEC_DualObject>();
 }
 
 public void addObject(DEC_Object object) throws DEC_Exception{
  int index = getObjectIndex(object);
  if(index != -1){
   throw new DEC_Exception("object: "+object+" already in Complex");
  }else{
   if(object.dimension()==0){
    if(object instanceof DEC_PrimalObject){
     object.setIndex(primalVertices.size());
     primalVertices.add(new DEC_PrimalObject(object));
    }else{
     object.setIndex(dualVertices.size());
     dualVertices.add(new DEC_DualObject(object,'v'));
    }
   }else if(object.dimension()==1){
    if(object instanceof DEC_PrimalObject){
     object.setIndex(primalEdges.size());
     primalEdges.add(new DEC_PrimalObject(object));
    }else{
     object.setIndex(dualEdges.size());
     dualEdges.add(new DEC_DualObject(object,'e'));
    }
   }else if(object.dimension()==2){
    if(object instanceof DEC_PrimalObject){
     object.setIndex(primalFaces.size());
     primalFaces.add(new DEC_PrimalObject(object));
    }else{
     object.setIndex(dualFaces.size());
     dualFaces.add(new DEC_DualObject(object,'f'));
    }
   }else{
    if(object instanceof DEC_PrimalObject){
     object.setIndex(primalTets.size());
     primalTets.add(new DEC_PrimalObject(object));
    }else{
     object.setIndex(dualCells.size());
     dualCells.add(new DEC_DualObject(object,'c'));
    }
   }
  }
 }
 public void setComplex(DEC_GeometricContainer container,OBJMeshReader mesh)throws DEC_Exception{
  setPrimalComplex(container);
  setDualComplex();
 }
 public void setDualComplex()throws DEC_Exception{
  //create dual vertices from primal faces
  for(int i=0;i<primalFaces.size();i++){
   DEC_PrimalObject face = getPrimalObject(2,i);
   PVector dualVertCenter = face.getVectorContent(0);
   PVector dualVertNormal = face.getVectorContent(1);
   DEC_DualObject dualVert = new DEC_DualObject(new IndexSet(i),'v');
   dualVert.addToVectorContent(dualVertCenter);
   dualVert.addToVectorContent(dualVertNormal);
   addObject(dualVert);
  }
  //create dual edges from primal edges
  for(int i=0;i<primalEdges.size();i++){
   ArrayList<DEC_PrimalObject> contFaces = primalObjectsContaining(primalEdges.get(i));
   if(contFaces.size()==2){
    DEC_PrimalObject f0 = contFaces.get(0);
    DEC_PrimalObject f1 = contFaces.get(1);
    int fi0 = f0.getIndex();
    int fi1 = f1.getIndex();
    DEC_DualObject dualEdge = new DEC_DualObject(new IndexSet(new int[]{fi0,fi1}), i,'e');
    dualEdge.addToVectorContent(primalEdges.get(i).getVectorContent(0));
    dualEdge.addToVectorContent(f0.getVectorContent(1));
    dualEdge.addToVectorContent(f1.getVectorContent(1));
    addObject(dualEdge);
   }
  }
 }
 public void setPrimalComplex(DEC_GeometricContainer container) throws DEC_Exception{
  ArrayList<IndexSet> primalFaceIndices = container.getModelFaceIndexInformation();
  //create primal complex
  for(int i=0;i<primalFaceIndices.size();i++){
   IndexSet faceIndices = primalFaceIndices.get(i);
   DEC_PrimalObject face = new DEC_PrimalObject(faceIndices,i);
   ArrayList<PVector> faceVectorContent = container.getObjectVectorContent(face);
   for(int k=0;k<faceVectorContent.size();k++){
    face.addToVectorContent(faceVectorContent.get(k));
   }
   addObject(face);
   //create primal vertices from face indices
   for(int j=0;j<faceIndices.size();j++){
    int vertIndex = faceIndices.getIndex(j);
    DEC_PrimalObject vertex = new DEC_PrimalObject(new IndexSet(vertIndex));
    if(objectIndexSearch(vertex)==-1){
     ArrayList<PVector> vertexVectorContent = container.getObjectVectorContent(vertex);
     for(int k=0;k<vertexVectorContent.size();k++){
      vertex.addToVectorContent(vertexVectorContent.get(k));
     }
     addObject(vertex);
    }
   }
   //create primal edges from face boundary
   ArrayList<DEC_Object> boundEdges = face.boundary();
   for(int j=0;j<boundEdges.size();j++){
    DEC_PrimalObject edge = new DEC_PrimalObject(boundEdges.get(j));
    if(objectIndexSearch(edge)==-1){
     ArrayList<PVector> edgeVectorContent = container.getObjectVectorContent(edge);
     for(int k=0;k<edgeVectorContent.size();k++){
      edge.addToVectorContent(edgeVectorContent.get(k));
     }
     addObject(edge);
    }
   }
  }
 }
 public DEC_PrimalObject getPrimalObject(int dimension, int position) throws DEC_Exception{
  if(dimension == 0){
   if(position<0 || position > primalVertices.size()){
    throw new DEC_Exception(" index: "+position+" is out of bounds.");
   }else{
    return primalVertices.get(position);
   }
  }else if(dimension == 1){
   if(position<0 || position > primalEdges.size()){
    throw new DEC_Exception(" index: "+position+" is out of bounds.");
   }else{
    return primalEdges.get(position);
   }
  }else if(dimension == 2){
   if(position<0 || position > primalFaces.size()){
    throw new DEC_Exception(" index: "+position+" is out of bounds.");
   }else{
    return primalFaces.get(position);
   }
  }else{
   if(position<0 || position > primalTets.size()){
    throw new DEC_Exception(" index: "+position+" is out of bounds.");
   }else{
    return primalTets.get(position);
   }
  }
 }
 public DEC_DualObject getDualObject(int dimension, int position) throws DEC_Exception{
  if(dimension == 0){
   if(position<0 || position > dualVertices.size()){
    throw new DEC_Exception(" index: "+position+" is out of bounds.");
   }else{
    return dualVertices.get(position);
   }
  }else if(dimension == 1){
   if(position<0 || position > dualEdges.size()){
    throw new DEC_Exception(" index: "+position+" is out of bounds.");
   }else{
    return dualEdges.get(position);
   }
  }else if(dimension == 2){
   if(position<0 || position > dualFaces.size()){
    throw new DEC_Exception(" index: "+position+" is out of bounds.");
   }else{
    return dualFaces.get(position);
   }
  }else{
   if(position<0 || position > dualCells.size()){
    throw new DEC_Exception(" index: "+position+" is out of bounds.");
   }else{
    return dualCells.get(position);
   }
  }
 }
 public int objectIndexSearch(DEC_Object object) throws DEC_Exception{
  if(object instanceof DEC_PrimalObject){
   return primalObjectIndexSearch(new DEC_PrimalObject(object));
  }else if(object instanceof DEC_DualObject){
   return dualObjectIndexSearch(new DEC_DualObject(object));
  }else{
   return -1;
  }
 }
 public int primalObjectIndexSearch(DEC_PrimalObject object)throws DEC_Exception{
  if(object.dimension()==0){
   return primalBinarySearchObjectIndex(object,primalVertices,0,primalVertices.size()-1);
  }else if(object.dimension()==1){
   return primalBinarySearchObjectIndex(object,primalEdges,0,primalEdges.size()-1);
  }else if(object.dimension()==2){
   return primalBinarySearchObjectIndex(object,primalFaces,0,primalFaces.size()-1);
  }else if(object.dimension()==3){
   return primalBinarySearchObjectIndex(object,primalTets,0,primalTets.size()-1);
  }else{
   return -1;
  }
 }
 public int dualObjectIndexSearch(DEC_DualObject object) throws DEC_Exception{
  if(object.dimension()==0){
   return dualBinarySearchObjectIndex(object, dualVertices, 0, dualVertices.size()-1);
  }else if(object.dimension()==1){
   return dualBinarySearchObjectIndex(object, dualEdges, 0, dualEdges.size()-1);
  }else if(object.dimension()==2){
   return dualBinarySearchObjectIndex(object, dualFaces, 0, dualFaces.size()-1);
  }else if(object.dimension()==3){
   return dualBinarySearchObjectIndex(object, dualCells, 0, dualCells.size()-1);
  }else{
   return -1;
  }
 }
 public int primalBinarySearchObjectIndex(DEC_PrimalObject object, ArrayList<DEC_PrimalObject> list, int i0, int i1)throws DEC_Exception{
  if(i0>i1){
   return -1;
  }else{
   if(i0==i1){
    if(list.get(i0).isEqual(object)){
     return i0;
    }else{
     return -1;
    }
   }else{
    int midPoint = (i0+i1)/2;
    int index1 = primalBinarySearchObjectIndex(object,list,i0,midPoint);
    if(index1==-1){
     return primalBinarySearchObjectIndex(object, list, midPoint+1, i1);
    }else{
     return index1;
    }
   }
  }
 }
  public int dualBinarySearchObjectIndex(DEC_DualObject object, ArrayList<DEC_DualObject> list, int i0, int i1) throws DEC_Exception{
  if(i0>i1){
   return -1;
  }else{
   if(i0==i1){
    if(list.get(i0).isEqual(object)){
     return i0;
    }else{
     return -1;
    }
   }else{
    int midPoint = (i0+i1)/2;
    int index1 = dualBinarySearchObjectIndex(object,list,i0,midPoint);
    if(index1==-1){
     return dualBinarySearchObjectIndex(object, list, midPoint+1, i1);
    }else{
     return index1;
    }
   }
  }
 }
 public int getObjectIndex(DEC_Object object) throws DEC_Exception{
  int index = -1;
  if(object.dimension() == 0){
   if(object instanceof DEC_PrimalObject){
    for(int i=0;i<primalVertices.size();i++){
     if(primalVertices.get(i).isEqual(object)){
      index = i;
     }
    }
   }else{
    for(int i=0;i<dualVertices.size();i++){
     if(dualVertices.get(i).isEqual(object)){
      index = i;
     }
    }
   }
  }else if(object.dimension() == 1){
   if(object instanceof DEC_PrimalObject){
    for(int i=0;i<primalEdges.size();i++){
     if(primalEdges.get(i).isEqual(object)){
      index = i;
     }
    }  
   }else{
    for(int i=0;i<dualEdges.size();i++){
     if(dualEdges.get(i).isEqual(object)){
      index = i;
     }
    }
   }
  }else if(object.dimension() == 2){
   if(object instanceof DEC_PrimalObject){
    for(int i=0;i<primalFaces.size();i++){
     if(primalFaces.get(i).isEqual(object)){
      index = i;
     }
    }  
   }else{
    for(int i=0;i<dualFaces.size();i++){
     if(dualFaces.get(i).isEqual(object)){
      index = i;
     }
    }
   }
  }else if(object.dimension()==3){
   if(object instanceof DEC_PrimalObject){
    for(int i=0;i<primalTets.size();i++){
     if(primalTets.get(i).isEqual(object)){
      index = i;
     }
    }
   }else{
    for(int i=0;i<dualCells.size();i++){
     if(dualCells.get(i).isEqual(object)){
      index = i;
     }
    }
   }
  }
  return index;
 }
 public void setObject(int position, DEC_Object object) throws DEC_Exception{
  if(position < 0){
   throw new DEC_Exception(position +"is out of bounds");
  }else{
   if(object instanceof DEC_PrimalObject){
    if(object.dimension() == 0){
     if(position > primalVertices.size()){
      throw new DEC_Exception(position +"is out of bounds");
     }else{
      primalVertices.set(position, new DEC_PrimalObject(object));
     }
    }else if(object.dimension() == 1){
     if(position > primalEdges.size()){
      throw new DEC_Exception(position +"is out of bounds");
     }else{
      primalEdges.set(position, new DEC_PrimalObject(object));
     }
    }else if(object.dimension() == 2){
     if(position > primalFaces.size()){
      throw new DEC_Exception(position +"is out of bounds");
     }else{
      primalFaces.set(position, new DEC_PrimalObject(object));
     }
    }else if(object.dimension() == 3){
     if(position > primalTets.size()){
      throw new DEC_Exception(position +"is out of bounds");
     }else{
      primalTets.set(position, new DEC_PrimalObject(object));
     }
    }
   }else if(object instanceof DEC_DualObject){
    if(object.dimension() == 0){
     if(position > dualVertices.size()){
      throw new DEC_Exception(position +"is out of bounds");
     }else{
      dualVertices.set(position,new DEC_DualObject(object,'v'));
     }
    }else if(object.dimension() == 1){
     if(position > dualEdges.size()){
      throw new DEC_Exception(position +"is out of bounds");
     }else{
      dualEdges.set(position,new DEC_DualObject(object,'e'));
     }
    }else if(object.dimension() == 2){
     if(position > dualFaces.size()){
      throw new DEC_Exception(position +"is out of bounds");
     }else{
      dualFaces.set(position,new DEC_DualObject(object,'f'));
     }
    }else if(object.dimension() == 3){
     if(position > dualCells.size()){
      throw new DEC_Exception(position +"is out of bounds");
     }else{
      dualCells.set(position, new DEC_DualObject(object,'c'));
     }
    }
   }else{
    throw new DEC_Exception("undefined DEC_Object used");
   } 
  }
 }
 public void deleteObject(int dimension, int position, char type) throws DEC_Exception{
  if(position < 0){
   throw new DEC_Exception(position +"is out of bounds");
  }else{
   if(type == 'p'){
    if(dimension == 0){
     if(position > primalVertices.size()){
      throw new DEC_Exception(position +"is out of bounds");
     }else{
      primalVertices.remove(position);
     }
    }else if(dimension == 1){
     if(position > primalEdges.size()){
      throw new DEC_Exception(position +"is out of bounds");
     }else{
      primalEdges.remove(position);
     }
    }else if(dimension == 2){
     if(position > primalFaces.size()){
      throw new DEC_Exception(position +"is out of bounds");
     }else{
      primalFaces.remove(position);
     }
    }else if(dimension == 3){
     if(position > primalTets.size()){
      throw new DEC_Exception(position +"is out of bounds");
     }else{
      primalTets.remove(position);
     }
    }
   }else if(type == 'd'){
    if(dimension == 0){
     if(position > dualVertices.size()){
      throw new DEC_Exception(position +"is out of bounds");
     }else{
      dualVertices.remove(position);
     }
    }else if(dimension == 1){
     if(position > dualEdges.size()){
      throw new DEC_Exception(position +"is out of bounds");
     }else{
      dualEdges.remove(position);
     }
    }else if(dimension == 2){
     if(position > dualFaces.size()){
      throw new DEC_Exception(position +"is out of bounds");
     }else{
      dualFaces.remove(position);
     }
    }else if(dimension == 3){
     if(position > dualCells.size()){
      throw new DEC_Exception(position +"is out of bounds");
     }else{
      dualCells.remove(position);
     }
    }
   }else{
    throw new DEC_Exception("undefined DEC_Object type used");
   } 
  }
 }
 public ArrayList<DEC_PrimalObject> primalObjectsContaining(DEC_PrimalObject object)throws DEC_Exception{
  ArrayList<DEC_PrimalObject> elements = new ArrayList<DEC_PrimalObject>();
  if(object.dimension() == 0){
   if(primalTets.isEmpty()){
    for(int i=0;i<primalFaces.size();i++){
     if(primalFaces.get(i).contains(object)){
      elements.add(primalFaces.get(i));
     }
    }
   }else{
    for(int i=0;i<primalTets.size();i++){
     if(primalTets.get(i).contains(object)){
      elements.add(primalTets.get(i));
     }
    }
   }
  }
  else if(object.dimension()==1){
   for(int i=0;i<primalFaces.size();i++){
     if(primalFaces.get(i).contains(object)){
      elements.add(primalFaces.get(i));
     }
    }
  }else if(object.dimension()==2){
   for(int i=0;i<primalTets.size();i++){
     if(primalTets.get(i).contains(object)){
      elements.add(primalTets.get(i));
     }
    }
  }
  return elements;
 }
 public int numPrimalVertices(){
  return primalVertices.size();
 }
 public int numPrimalEdges(){
  return primalEdges.size();
 }
 public int numPrimalFaces(){
  return primalFaces.size();
 }
 public int numPrimalTets(){
  return primalTets.size();
 }
 public int numDualVertices(){
  return dualVertices.size();
 }
 public int numDualEdges(){
  return dualEdges.size();
 }
 public int numDualFaces(){
  return dualFaces.size();
 }
 public int numDualCells(){
  return dualCells.size();
 }
 public ArrayList<DEC_PrimalObject> cobordingElements(DEC_PrimalObject object) throws DEC_Exception{
  ArrayList<DEC_PrimalObject> cobording = new ArrayList<DEC_PrimalObject>();
  DEC_Iterator iter = createIterator(object.dimension(), 'p');
  while(iter.hasNext()){
   DEC_PrimalObject op = (DEC_PrimalObject) iter.next();
   if(op.cobordant(object)){
    cobording.add(op);
   }
  }
  return cobording;
 }
 public ArrayList<DEC_DualObject> cobordingElements(DEC_DualObject object) throws DEC_Exception{
  ArrayList<DEC_DualObject> cobording = new ArrayList<DEC_DualObject>();
  DEC_Iterator iter = createIterator(object.dimension(), 'd');
  while(iter.hasNext()){
   DEC_DualObject od = (DEC_DualObject) iter.next();
   if(od.cobordant(object)){
    cobording.add(od);
   }
  }
  return cobording;
 }
 public DEC_PrimalObject next(DEC_PrimalObject object,DEC_GeometricContainer container) throws DEC_Exception{
   ArrayList<PVector> verts = container.getGeometricContent(object);
   if(object.dimension() == 0){
    
   }else if(object.dimension()==1){ 
          
   }else if(object.dimension()==2){
    
   }else if(object.dimension()==3){
    
   }
   return new DEC_PrimalObject();
 }
 public DEC_DualObject next(DEC_DualObject object){
  return null;
 }
 public DEC_DualObject dual(DEC_PrimalObject object){
  if(object.dimension() == 0){
   if(dualCells.isEmpty()){
    return dualFaces.get(object.getIndex());
   }else{
    return dualCells.get(object.getIndex());
   }
  }else if(object.dimension() == 1){
   return dualEdges.get(object.getIndex());
  }else if(object.dimension() == 2){
   if(dualCells.isEmpty()){
    return dualVertices.get(object.getIndex());
   }else{
    return dualFaces.get(object.getIndex());
   }
  }else{
   return dualVertices.get(object.getIndex());
  }
 }
 public DEC_PrimalObject dual(DEC_DualObject object){
  if(object.dimension() == 0){
   if(primalTets.isEmpty()){
    return primalFaces.get(object.getIndex());
   }else{
    return primalTets.get(object.getIndex());
   }
  }else if(object.dimension() == 1){
   return primalEdges.get(object.getIndex());
  }else if(object.dimension() == 2){
   if(primalTets.isEmpty()){
    return primalVertices.get(object.getIndex());
   }else{
    return primalFaces.get(object.getIndex());
   }
  }else{
   return primalVertices.get(object.getIndex());
  }
 }
 public DEC_Iterator createIterator(DEC_Object object) throws DEC_Exception{
  DEC_Iterator complexIterator = null;
  DEC_Iterator objectIterator = new DEC_Iterator();
  if(object instanceof DEC_PrimalObject){
   complexIterator = createIterator(1,'p');
  }else if(object instanceof DEC_DualObject){
   complexIterator = createIterator(1,'d');
  }
  if(complexIterator != null){
   while(complexIterator.hasNext()){
    if(object instanceof DEC_PrimalObject){
     DEC_PrimalObject op = (DEC_PrimalObject) complexIterator.next();
     if(object.dimension()==0){
      int i = object.getVertices().getIndex(0);
      if(op.contains(object)){
       int i0 = op.getVertices().getIndex(0);
       int i1 = op.getVertices().getIndex(1);
       if(i == i0 || i == i1){
        int indexToLook;
        if(i==i0){
         indexToLook = i1;
        }else{
         indexToLook = i0;        
        }
        int tempIndex = getObjectIndex(new DEC_PrimalObject(new IndexSet(indexToLook)));
        if(tempIndex!= -1){
         objectIterator.add(getPrimalObject(0,tempIndex));
        }
       }
      }
     }else if(object.dimension() == 1){
      if(op.cobordant(object)){
       objectIterator.add(op);
      }
     }else if(object.dimension() == 2 && primalTets.isEmpty()){
      DEC_DualObject dual = dual((DEC_PrimalObject) object);
      DEC_Iterator dualIterator = createIterator(dual);
      while(dualIterator.hasNext()){
       objectIterator.add(dual((DEC_DualObject)dualIterator.next()));
      }
     }else if(object.dimension()==2 && !primalTets.isEmpty()){
      
     }
    }else if(object instanceof DEC_DualObject){
     DEC_DualObject od = (DEC_DualObject) complexIterator.next();
     if(object.dimension() == 0){
      if(od.contains(object)){
       int i0 = od.getVertices().getIndex(0);
       int i1 = od.getVertices().getIndex(1);
       if(object.getVertices().getIndex(0) == i0){
        int tempIndex = getObjectIndex(new DEC_DualObject(new IndexSet(i1)));
        if(tempIndex!= -1){
         objectIterator.add(getDualObject(0,tempIndex));
        }
       }
      }
     }else if(object.dimension()== 1){
      if(od.cobordant(object)){
       objectIterator.add(od);
      }
     }else if(object.dimension() == 2 && dualCells.isEmpty()){
      DEC_PrimalObject dual = dual((DEC_DualObject) object);
      DEC_Iterator dualIterator = createIterator(dual);
      while(dualIterator.hasNext()){
       objectIterator.add(dual((DEC_PrimalObject)dualIterator.next()));
      }
     }
    }
   }
  }
  return objectIterator;
 }
 public DEC_Iterator createIterator(int dimension, char type) {
  DEC_Iterator iterator = new DEC_Iterator();
  switch(dimension){
   case 0:
    if(type == 'p'){
     for(int i=0;i<primalVertices.size();i++){
      iterator.add(primalVertices.get(i));
     }
    }else{
     for(int i=0;i<dualVertices.size();i++){
      iterator.add(dualVertices.get(i));
     }
    }
    break;
   case 1:
    if(type == 'p'){
     for(int i=0;i<primalEdges.size();i++){
      iterator.add(primalEdges.get(i));
     }
    }else{
     for(int i=0;i<dualEdges.size();i++){
      iterator.add(dualEdges.get(i));
     }
    }
    break;
   case 2:
    if(type == 'p'){
     for(int i=0;i<primalFaces.size();i++){
      iterator.add(primalFaces.get(i));
     }
    }else{
     for(int i=0;i<dualFaces.size();i++){
      iterator.add(dualFaces.get(i));
     }
    }
    break;
   case 3:
    if(type == 'p'){
     for(int i=0;i<primalTets.size();i++){
      iterator.add(primalTets.get(i));
     }
    }else{
     for(int i=0;i<dualCells.size();i++){
      iterator.add(dualCells.get(i));
     }
    }
    break;
  }
  return iterator;
 }
 public void printComplexInformation(){
  System.out.println("----------------------------------------------------------");
  System.out.println("-----------------DEC Complex Information-----------------");
  System.out.println("----------------------------------------------------------");
  System.out.println("num Tets: "+primalTets.size());
  System.out.println("num primal faces: "+primalFaces.size());
  System.out.println("num primal edges: "+primalEdges.size());
  System.out.println("num primal verts: "+primalVertices.size());
  System.out.println("----------------------------------------------------------");
  System.out.println("num cells: "+ dualCells.size());
  System.out.println("num dual faces: "+dualFaces.size());
  System.out.println("num dual edges: "+dualEdges.size());
  System.out.println("num dual vertices: "+dualVertices.size());
  System.out.println("----------------------------------------------------------");
  System.out.println("----------------------------------------------------------");
 }
}
